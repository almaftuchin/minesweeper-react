{"version":3,"sources":["components/Board.jsx","App.js","serviceWorker.js","index.js","logo.png"],"names":["Board","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","initBoard","size","board","i","concat","toConsumableArray","mine","clicked","flagged","val","addMines","m","index","randomNumber","addMoves","w","checkCell","Math","floor","random","renderBoard","state","map","react_default","a","createElement","className","key","fillBoard","height","width","mines","inherits","createClass","value","h","Component","App","src","logo","alt","components_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.4b2c77a7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport class Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      board: this.fillBoard(props.height, props.width, props.mines)\r\n    };\r\n  }\r\n\r\n  fillBoard(h, w, m) {\r\n    let board = [];\r\n    let size = h * w;\r\n    board = this.initBoard(size);\r\n    board = this.addMines(board, size, m);\r\n    board = this.addMoves(board, size, w);\r\n    return board;\r\n  }\r\n\r\n  // Fill board with nada\r\n  initBoard = size => {\r\n    let board = [];\r\n    for (let i = 0; i < size; i++) {\r\n      board = [...board, { mine: 0, clicked: 0, flagged: 0, val: 0 }];\r\n    }\r\n    return board;\r\n  };\r\n\r\n  // Fill board with mines\r\n  addMines = (board, size, m) => {\r\n    let i = 0;\r\n    while (i < m) {\r\n      let index = this.randomNumber(size);\r\n      if (!board[index].mine) {\r\n        board[index].mine = 1;\r\n        i++;\r\n      }\r\n    }\r\n    return board;\r\n  };\r\n\r\n  // Fill board with moves\r\n  addMoves = (board, size, w) => {\r\n    for (let i = 0; i < size; i++) {\r\n      if (board[i].mine) continue;\r\n      board[i] = this.checkCell(board, i, size, w);\r\n    }\r\n    return board;\r\n  };\r\n\r\n  checkCell = (board, i, size, w) => {\r\n    // top\r\n    if (i >= w && board[i - w].mine) board[i].val++;\r\n    // bottom\r\n    if (i < size - w && board[i + w].mine) board[i].val++;\r\n\r\n    if (i % w < w - 1) {\r\n      // top right\r\n      if (i >= w && board[i - w + 1].mine) board[i].val++;\r\n      // bottom right\r\n      if (i < size - w && board[i + w + 1].mine) board[i].val++;\r\n      // right\r\n      if (board[i + 1].mine) board[i].val++;\r\n    }\r\n    if (i % w > 0) {\r\n      // top left\r\n      if (i > w && board[i - w - 1].mine) board[i].val++;\r\n      // bottom left\r\n      if (i < size - w && board[i + w - 1].mine) board[i].val++;\r\n      // left\r\n      if (board[i - 1].mine) board[i].val++;\r\n    }\r\n    return board[i];\r\n  };\r\n\r\n  randomNumber = size => Math.floor(Math.random() * size);\r\n\r\n  renderBoard = () => {\r\n    return this.state.board.map((props, index) => {\r\n      return (\r\n        <div className='cell' key={index}>\r\n          {props.mine === 1 ? 'ðŸ’£' : props.val}\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return <div>{this.renderBoard()}</div>;\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React, { Component } from 'react';\nimport Board from './components/Board';\nimport './App.css';\nimport logo from './logo.png';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='game'>\n        <header className='App-header'>\n          <img src={logo} className='App-logo' alt='logo' />\n          <span>MineSweeper</span>\n        </header>\n        <Board height={8} width={8} mines={10} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.f5c252a1.png\";"],"sourceRoot":""}