{"version":3,"sources":["components/Cell.jsx","components/Board.jsx","App.js","serviceWorker.js","index.js","logo.png"],"names":["Cell","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this$props$cell","props","cell","revealed","flagged","mine","val","_this$props","onClick","rightClick","className","react_default","a","createElement","onContextMenu","getValue","Component","Board","_this","call","newGame","progress","setState","board","fillBoard","state","heigth","width","mines","status","initBoard","size","i","concat","toConsumableArray","addMines","m","j","index","randomNumber","addNeighbor","w","minesLocation","forEach","Math","floor","random","boom","copy","reveal","_ref","floodFill","renderBoard","map","components_Cell","e","h","App","src","logo","alt","components_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.10c74835.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport class Cell extends Component {\r\n  getValue() {\r\n    const { revealed, flagged, mine, val } = this.props.cell;\r\n    if (!revealed) return flagged ? 'ðŸš©' : null;\r\n    if (mine) return 'ðŸ’£';\r\n    return val ? val : null;\r\n  }\r\n\r\n  render() {\r\n    const { cell, onClick, rightClick } = this.props;\r\n    let className =\r\n      'cell' +\r\n      (cell.revealed ? ' revealed' : '') +\r\n      (cell.flagged ? ' is-flag' : '');\r\n    return (\r\n      <div onClick={onClick} className={className} onContextMenu={rightClick}>\r\n        {this.getValue()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cell;\r\n","import React, { Component } from 'react';\r\nimport Cell from './Cell.jsx';\r\n\r\nexport class Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.progress = 0;\r\n    this.state = {\r\n      board: this.fillBoard(props.heigth, props.width, props.mines),\r\n      status: 'Good luck!',\r\n      heigth: props.heigth,\r\n      width: props.width,\r\n      mines: props.mines,\r\n      size: props.heigth * props.width\r\n    };\r\n  }\r\n\r\n  fillBoard(h, w, m) {\r\n    let size = h * w;\r\n    let board = this.initBoard(size);\r\n    board = this.addMines(board, size, m);\r\n    let minesLocation = board[1];\r\n    board = board[0];\r\n    board = this.addNeighbor(board, size, w, minesLocation);\r\n    return board;\r\n  }\r\n\r\n  newGame = () => {\r\n    this.progress = 0;\r\n    this.setState({\r\n      board: this.fillBoard(\r\n        this.state.heigth,\r\n        this.state.width,\r\n        this.state.mines\r\n      ),\r\n      status: 'Good luck!'\r\n    });\r\n  };\r\n\r\n  // Fill board with nada\r\n  initBoard = size => {\r\n    let board = [];\r\n    for (let i = 0; i < size; i++) {\r\n      board = [...board, { mine: 0, revealed: 0, flagged: 0, val: 0 }];\r\n    }\r\n    return board;\r\n  };\r\n\r\n  // Fill board with mines\r\n  addMines = (board, size, m) => {\r\n    let i = 0,\r\n      j = [];\r\n    while (i < m) {\r\n      let index = this.randomNumber(size);\r\n      if (!board[index].mine) {\r\n        board[index].mine = 1;\r\n        board[index].val = -1;\r\n        j = [...j, index];\r\n        i++;\r\n      }\r\n    }\r\n    return [board, j];\r\n  };\r\n\r\n  // Fill board with moves\r\n  addNeighbor = (board, size, w, minesLocation) => {\r\n    minesLocation.forEach(i => {\r\n      if (i >= w) {\r\n        // top left\r\n        if (\r\n          i - w - 1 >= 0 &&\r\n          (i - w - 1) % w !== w - 1 &&\r\n          !board[i - w - 1].mine\r\n        )\r\n          board[i - w - 1].val++;\r\n        // top\r\n        if (!board[i - w].mine) board[i - w].val++;\r\n        // top right\r\n        if ((i - w + 1) % w !== 0 && !board[i - w + 1].mine)\r\n          board[i - w + 1].val++;\r\n      }\r\n      if (i < size - w) {\r\n        // btm left\r\n        if ((i + w - 1) % w !== w - 1 && !board[i + w - 1].mine)\r\n          board[i + w - 1].val++;\r\n        // btm\r\n        if (!board[i + w].mine) board[i + w].val++;\r\n        // btm right\r\n        if ((i + w + 1) % w !== 0 && !board[i + w + 1].mine)\r\n          board[i + w + 1].val++;\r\n      }\r\n      // left\r\n      if (i - 1 >= 0 && (i - 1) % w !== w - 1 && !board[i - 1].mine)\r\n        board[i - 1].val++;\r\n      // right\r\n      if (i + 1 < size && (i + 1) % w !== 0 && !board[i + 1].mine)\r\n        board[i + 1].val++;\r\n    });\r\n    return board;\r\n  };\r\n\r\n  randomNumber = size => Math.floor(Math.random() * size);\r\n\r\n  boom = () => {\r\n    let copy = [...this.state.board];\r\n    copy.forEach(cell => {\r\n      cell.revealed = 1;\r\n    });\r\n    this.setState({\r\n      board: copy,\r\n      status: 'ðŸ˜¢ You lost ðŸ˜¢'\r\n    });\r\n  };\r\n\r\n  reveal = (index, { mine, revealed, flagged, val }) => {\r\n    if (revealed || flagged) return;\r\n    if (mine) {\r\n      return this.boom();\r\n    }\r\n    if (val === 0) {\r\n      this.floodFill(index);\r\n    } else {\r\n      let copy = [...this.state.board];\r\n      this.progress++;\r\n      copy[index].revealed = 1;\r\n      if (this.progress === this.state.size - this.state.mines) {\r\n        copy.forEach(cell => {\r\n          cell.revealed = 1;\r\n        });\r\n        return this.setState({\r\n          board: copy,\r\n          status: 'ðŸŽ‰ YOU WON ðŸŽ‰'\r\n        });\r\n      }\r\n      this.setState({\r\n        board: copy\r\n      });\r\n    }\r\n  };\r\n\r\n  floodFill = i => {\r\n    let board = [...this.state.board];\r\n    if (board[i].mine || board[i].revealed) return;\r\n    board[i].revealed = 1;\r\n    this.progress++;\r\n    this.setState({\r\n      board: board\r\n    });\r\n    let w = this.state.width;\r\n    let size = this.state.size;\r\n    if (i >= w) {\r\n      // top left\r\n      if (i - w - 1 >= 0 && (i - w - 1) % w !== w - 1)\r\n        this.reveal(i - w - 1, board[i - w - 1]);\r\n      // top\r\n      this.reveal(i - w, board[i - w]);\r\n      // top right\r\n      if ((i - w + 1) % w !== 0) this.reveal(i - w + 1, board[i - w + 1]);\r\n    }\r\n    if (i < size - w) {\r\n      // btm left\r\n      if ((i + w - 1) % w !== w - 1) this.reveal(i + w - 1, board[i + w - 1]);\r\n      // btm\r\n      this.reveal(i + w, board[i + w]);\r\n      // btm right\r\n      if ((i + w + 1) % w !== 0) this.reveal(i + w + 1, board[i + w + 1]);\r\n    }\r\n    // left\r\n    if (i - 1 >= 0 && (i - 1) % w !== w - 1) this.reveal(i - 1, board[i - 1]);\r\n    // right\r\n    if (i + 1 < size && (i + 1) % w !== 0) this.reveal(i + 1, board[i + 1]);\r\n  };\r\n\r\n  renderBoard = () => {\r\n    return this.state.board.map((props, index) => {\r\n      return (\r\n        <Cell\r\n          key={index}\r\n          onClick={() => this.reveal(index, props)}\r\n          onContextMenu={e => this.rightClick(index, props, e)}\r\n          cell={props}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className='game-header'>\r\n          {this.state.status}\r\n          <br />\r\n          <br />\r\n          <button className='btn btn-success' onClick={this.newGame}>\r\n            New Game\r\n          </button>\r\n          <br />\r\n        </div>\r\n        {this.renderBoard()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React, { Component } from 'react';\nimport Board from './components/Board';\nimport './App.css';\nimport logo from './logo.png';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='game'>\n        <header className='App-header'>\n          <img src={logo} className='App-logo' alt='logo' />\n          <span>MineSweeper</span>\n        </header>\n        <Board heigth={8} width={8} mines={10} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.f5c252a1.png\";"],"sourceRoot":""}